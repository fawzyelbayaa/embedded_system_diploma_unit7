
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000434  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000564  0800056c  0001056c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000564  08000564  0001056c  2**0
                  CONTENTS
  4 .ARM          00000000  08000564  08000564  0001056c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000564  0800056c  0001056c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000564  08000564  00010564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000568  08000568  00010568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001056c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800056c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800056c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001056c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001929  00000000  00000000  00010595  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000429  00000000  00000000  00011ebe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000044c  00000000  00000000  000122e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000000c0  00000000  00000000  00012738  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000098  00000000  00000000  000127f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001d7c  00000000  00000000  00012890  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000df9  00000000  00000000  0001460c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00007edc  00000000  00000000  00015405  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0001d2e1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000023c  00000000  00000000  0001d35c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800054c 	.word	0x0800054c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800054c 	.word	0x0800054c

08000170 <clock_init>:

#include "Stm32_F103_x6.h"
#include "Stm32_F103C6_GPIO_Drivers.h"

void clock_init()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0

	//enable clock  GPIOA
	RCC_GPIOA_CLK_EN();
 8000174:	4b07      	ldr	r3, [pc, #28]	; (8000194 <clock_init+0x24>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a06      	ldr	r2, [pc, #24]	; (8000194 <clock_init+0x24>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	//enable clock GPIOB
	RCC_GPIOB_CLK_EN();
 8000180:	4b04      	ldr	r3, [pc, #16]	; (8000194 <clock_init+0x24>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a03      	ldr	r2, [pc, #12]	; (8000194 <clock_init+0x24>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]

}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	40021000 	.word	0x40021000

08000198 <gpio_init>:
void gpio_init()
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b082      	sub	sp, #8
 800019c:	af00      	add	r7, sp, #0
	GPIO_Pinconfig_t pincfg;
	//PA1: input Highz floating input(reset value)
	pincfg.GPIO_PinNumber =GPIO_PINS_1;
 800019e:	2302      	movs	r3, #2
 80001a0:	80bb      	strh	r3, [r7, #4]
	pincfg.GPIO_MODE =GPIO_MODE_INPUT_FLO;
 80001a2:	2301      	movs	r3, #1
 80001a4:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(GPIOA, &pincfg);
 80001a6:	1d3b      	adds	r3, r7, #4
 80001a8:	4619      	mov	r1, r3
 80001aa:	4814      	ldr	r0, [pc, #80]	; (80001fc <gpio_init+0x64>)
 80001ac:	f000 f900 	bl	80003b0 <MCAL_GPIO_Init>

	//PB1 :(OUTPUT push pull mode)
	//01 :output mode ,max speed=10MHZ
	//CNF 00 :General purpose ouput push pull
	pincfg.GPIO_PinNumber =GPIO_PINS_1;
 80001b0:	2302      	movs	r3, #2
 80001b2:	80bb      	strh	r3, [r7, #4]
	pincfg.GPIO_MODE =GPIO_MODE_OUTPUT_PP;
 80001b4:	2304      	movs	r3, #4
 80001b6:	71bb      	strb	r3, [r7, #6]
	pincfg.GPIO_OUTPUT_SPEED =GPIO_SPEED_10M;
 80001b8:	2301      	movs	r3, #1
 80001ba:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &pincfg);
 80001bc:	1d3b      	adds	r3, r7, #4
 80001be:	4619      	mov	r1, r3
 80001c0:	480f      	ldr	r0, [pc, #60]	; (8000200 <gpio_init+0x68>)
 80001c2:	f000 f8f5 	bl	80003b0 <MCAL_GPIO_Init>


	//PA13: input Highz floating input(reset value)
	pincfg.GPIO_PinNumber =GPIO_PINS_13;
 80001c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001ca:	80bb      	strh	r3, [r7, #4]
	pincfg.GPIO_MODE =GPIO_MODE_INPUT_FLO;
 80001cc:	2301      	movs	r3, #1
 80001ce:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(GPIOA, &pincfg);
 80001d0:	1d3b      	adds	r3, r7, #4
 80001d2:	4619      	mov	r1, r3
 80001d4:	4809      	ldr	r0, [pc, #36]	; (80001fc <gpio_init+0x64>)
 80001d6:	f000 f8eb 	bl	80003b0 <MCAL_GPIO_Init>

	//PB13 :(OUTPUT push pull mode)
	//01 :output mode ,max speed=10MHZ
	//CNF 00 :General purpose ouput push pull
	pincfg.GPIO_PinNumber =GPIO_PINS_13;
 80001da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001de:	80bb      	strh	r3, [r7, #4]
	pincfg.GPIO_MODE =GPIO_MODE_OUTPUT_PP;
 80001e0:	2304      	movs	r3, #4
 80001e2:	71bb      	strb	r3, [r7, #6]
	pincfg.GPIO_OUTPUT_SPEED =GPIO_SPEED_10M;
 80001e4:	2301      	movs	r3, #1
 80001e6:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &pincfg);
 80001e8:	1d3b      	adds	r3, r7, #4
 80001ea:	4619      	mov	r1, r3
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <gpio_init+0x68>)
 80001ee:	f000 f8df 	bl	80003b0 <MCAL_GPIO_Init>



}
 80001f2:	bf00      	nop
 80001f4:	3708      	adds	r7, #8
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	40010800 	.word	0x40010800
 8000200:	40010c00 	.word	0x40010c00

08000204 <wait>:
void wait(int x)
{
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	int  i,j;
	for(i = 0; i < x; i++)
 800020c:	2300      	movs	r3, #0
 800020e:	60fb      	str	r3, [r7, #12]
 8000210:	e00b      	b.n	800022a <wait+0x26>
		for(j=0; j < 255; j++);
 8000212:	2300      	movs	r3, #0
 8000214:	60bb      	str	r3, [r7, #8]
 8000216:	e002      	b.n	800021e <wait+0x1a>
 8000218:	68bb      	ldr	r3, [r7, #8]
 800021a:	3301      	adds	r3, #1
 800021c:	60bb      	str	r3, [r7, #8]
 800021e:	68bb      	ldr	r3, [r7, #8]
 8000220:	2bfe      	cmp	r3, #254	; 0xfe
 8000222:	ddf9      	ble.n	8000218 <wait+0x14>
	for(i = 0; i < x; i++)
 8000224:	68fb      	ldr	r3, [r7, #12]
 8000226:	3301      	adds	r3, #1
 8000228:	60fb      	str	r3, [r7, #12]
 800022a:	68fa      	ldr	r2, [r7, #12]
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	429a      	cmp	r2, r3
 8000230:	dbef      	blt.n	8000212 <wait+0xe>
}
 8000232:	bf00      	nop
 8000234:	3714      	adds	r7, #20
 8000236:	46bd      	mov	sp, r7
 8000238:	bc80      	pop	{r7}
 800023a:	4770      	bx	lr

0800023c <main>:
int main(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0

	clock_init();
 8000240:	f7ff ff96 	bl	8000170 <clock_init>
	gpio_init();
 8000244:	f7ff ffa8 	bl	8000198 <gpio_init>
	while(1)
	{
		//PA1 : connected external PUR
		if(MCAL_GPIO_ReadPin(GPIOA, GPIO_PINS_1) == 0 )  //press A1
 8000248:	2102      	movs	r1, #2
 800024a:	4811      	ldr	r0, [pc, #68]	; (8000290 <main+0x54>)
 800024c:	f000 f92f 	bl	80004ae <MCAL_GPIO_ReadPin>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d10b      	bne.n	800026e <main+0x32>
		{

			MCAL_GPIO_togglePin(GPIOB, GPIO_PINS_1);
 8000256:	2102      	movs	r1, #2
 8000258:	480e      	ldr	r0, [pc, #56]	; (8000294 <main+0x58>)
 800025a:	f000 f941 	bl	80004e0 <MCAL_GPIO_togglePin>
			while(MCAL_GPIO_ReadPin(GPIOA, GPIO_PINS_1) == 0); //single pressing
 800025e:	bf00      	nop
 8000260:	2102      	movs	r1, #2
 8000262:	480b      	ldr	r0, [pc, #44]	; (8000290 <main+0x54>)
 8000264:	f000 f923 	bl	80004ae <MCAL_GPIO_ReadPin>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d0f8      	beq.n	8000260 <main+0x24>
		}

		if(MCAL_GPIO_ReadPin(GPIOA, GPIO_PINS_13) == 1)    //press A13 (PDR)
 800026e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000272:	4807      	ldr	r0, [pc, #28]	; (8000290 <main+0x54>)
 8000274:	f000 f91b 	bl	80004ae <MCAL_GPIO_ReadPin>
 8000278:	4603      	mov	r3, r0
 800027a:	2b01      	cmp	r3, #1
 800027c:	d104      	bne.n	8000288 <main+0x4c>
		{

			MCAL_GPIO_togglePin(GPIOB, GPIO_PINS_13);
 800027e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000282:	4804      	ldr	r0, [pc, #16]	; (8000294 <main+0x58>)
 8000284:	f000 f92c 	bl	80004e0 <MCAL_GPIO_togglePin>
			//multiple pressing
		}
		wait(1);
 8000288:	2001      	movs	r0, #1
 800028a:	f7ff ffbb 	bl	8000204 <wait>
		if(MCAL_GPIO_ReadPin(GPIOA, GPIO_PINS_1) == 0 )  //press A1
 800028e:	e7db      	b.n	8000248 <main+0xc>
 8000290:	40010800 	.word	0x40010800
 8000294:	40010c00 	.word	0x40010c00

08000298 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000298:	480d      	ldr	r0, [pc, #52]	; (80002d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800029a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800029c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002a0:	480c      	ldr	r0, [pc, #48]	; (80002d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80002a2:	490d      	ldr	r1, [pc, #52]	; (80002d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002a4:	4a0d      	ldr	r2, [pc, #52]	; (80002dc <LoopForever+0xe>)
  movs r3, #0
 80002a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002a8:	e002      	b.n	80002b0 <LoopCopyDataInit>

080002aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ae:	3304      	adds	r3, #4

080002b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002b4:	d3f9      	bcc.n	80002aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002b6:	4a0a      	ldr	r2, [pc, #40]	; (80002e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002b8:	4c0a      	ldr	r4, [pc, #40]	; (80002e4 <LoopForever+0x16>)
  movs r3, #0
 80002ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002bc:	e001      	b.n	80002c2 <LoopFillZerobss>

080002be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002c0:	3204      	adds	r2, #4

080002c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002c4:	d3fb      	bcc.n	80002be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002c6:	f000 f91d 	bl	8000504 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ca:	f7ff ffb7 	bl	800023c <main>

080002ce <LoopForever>:

LoopForever:
    b LoopForever
 80002ce:	e7fe      	b.n	80002ce <LoopForever>
  ldr   r0, =_estack
 80002d0:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002d8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002dc:	0800056c 	.word	0x0800056c
  ldr r2, =_sbss
 80002e0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002e4:	2000001c 	.word	0x2000001c

080002e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002e8:	e7fe      	b.n	80002e8 <ADC1_2_IRQHandler>

080002ea <GET_CRLH_Position>:
 * @retval      -return the value to shifted from mode[]
 * Note         -
 */

uint8_t GET_CRLH_Position(uint16_t PinNumber)
{
 80002ea:	b480      	push	{r7}
 80002ec:	b083      	sub	sp, #12
 80002ee:	af00      	add	r7, sp, #0
 80002f0:	4603      	mov	r3, r0
 80002f2:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 80002f4:	88fb      	ldrh	r3, [r7, #6]
 80002f6:	2b80      	cmp	r3, #128	; 0x80
 80002f8:	d042      	beq.n	8000380 <GET_CRLH_Position+0x96>
 80002fa:	2b80      	cmp	r3, #128	; 0x80
 80002fc:	dc11      	bgt.n	8000322 <GET_CRLH_Position+0x38>
 80002fe:	2b08      	cmp	r3, #8
 8000300:	d036      	beq.n	8000370 <GET_CRLH_Position+0x86>
 8000302:	2b08      	cmp	r3, #8
 8000304:	dc06      	bgt.n	8000314 <GET_CRLH_Position+0x2a>
 8000306:	2b02      	cmp	r3, #2
 8000308:	d02e      	beq.n	8000368 <GET_CRLH_Position+0x7e>
 800030a:	2b04      	cmp	r3, #4
 800030c:	d02e      	beq.n	800036c <GET_CRLH_Position+0x82>
 800030e:	2b01      	cmp	r3, #1
 8000310:	d028      	beq.n	8000364 <GET_CRLH_Position+0x7a>
 8000312:	e047      	b.n	80003a4 <GET_CRLH_Position+0xba>
 8000314:	2b20      	cmp	r3, #32
 8000316:	d02f      	beq.n	8000378 <GET_CRLH_Position+0x8e>
 8000318:	2b40      	cmp	r3, #64	; 0x40
 800031a:	d02f      	beq.n	800037c <GET_CRLH_Position+0x92>
 800031c:	2b10      	cmp	r3, #16
 800031e:	d029      	beq.n	8000374 <GET_CRLH_Position+0x8a>
 8000320:	e040      	b.n	80003a4 <GET_CRLH_Position+0xba>
 8000322:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000326:	d033      	beq.n	8000390 <GET_CRLH_Position+0xa6>
 8000328:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800032c:	dc09      	bgt.n	8000342 <GET_CRLH_Position+0x58>
 800032e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000332:	d029      	beq.n	8000388 <GET_CRLH_Position+0x9e>
 8000334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000338:	d028      	beq.n	800038c <GET_CRLH_Position+0xa2>
 800033a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800033e:	d021      	beq.n	8000384 <GET_CRLH_Position+0x9a>
 8000340:	e030      	b.n	80003a4 <GET_CRLH_Position+0xba>
 8000342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000346:	d027      	beq.n	8000398 <GET_CRLH_Position+0xae>
 8000348:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800034c:	dc03      	bgt.n	8000356 <GET_CRLH_Position+0x6c>
 800034e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000352:	d01f      	beq.n	8000394 <GET_CRLH_Position+0xaa>
 8000354:	e026      	b.n	80003a4 <GET_CRLH_Position+0xba>
 8000356:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800035a:	d01f      	beq.n	800039c <GET_CRLH_Position+0xb2>
 800035c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000360:	d01e      	beq.n	80003a0 <GET_CRLH_Position+0xb6>
 8000362:	e01f      	b.n	80003a4 <GET_CRLH_Position+0xba>
	{
	case GPIO_PINS_0 :
		return 0;
 8000364:	2300      	movs	r3, #0
 8000366:	e01e      	b.n	80003a6 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_1 :
		return 4;
 8000368:	2304      	movs	r3, #4
 800036a:	e01c      	b.n	80003a6 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_2 :
		return 8;
 800036c:	2308      	movs	r3, #8
 800036e:	e01a      	b.n	80003a6 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_3 :
		return 12;
 8000370:	230c      	movs	r3, #12
 8000372:	e018      	b.n	80003a6 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_4 :
		return 16;
 8000374:	2310      	movs	r3, #16
 8000376:	e016      	b.n	80003a6 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_5 :
		return 20;
 8000378:	2314      	movs	r3, #20
 800037a:	e014      	b.n	80003a6 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_6 :
		return 24;
 800037c:	2318      	movs	r3, #24
 800037e:	e012      	b.n	80003a6 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_7 :
		return 28;
 8000380:	231c      	movs	r3, #28
 8000382:	e010      	b.n	80003a6 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_8 :
		return 0;
 8000384:	2300      	movs	r3, #0
 8000386:	e00e      	b.n	80003a6 <GET_CRLH_Position+0xbc>
		break;

	case GPIO_PINS_9 :
		return 4;
 8000388:	2304      	movs	r3, #4
 800038a:	e00c      	b.n	80003a6 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_10 :
		return 8;
 800038c:	2308      	movs	r3, #8
 800038e:	e00a      	b.n	80003a6 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_11 :
		return 12;
 8000390:	230c      	movs	r3, #12
 8000392:	e008      	b.n	80003a6 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_12 :
		return 16;
 8000394:	2310      	movs	r3, #16
 8000396:	e006      	b.n	80003a6 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_13 :
		return 20;
 8000398:	2314      	movs	r3, #20
 800039a:	e004      	b.n	80003a6 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_14 :
		return 24;
 800039c:	2318      	movs	r3, #24
 800039e:	e002      	b.n	80003a6 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PINS_15 :
		return 28;
 80003a0:	231c      	movs	r3, #28
 80003a2:	e000      	b.n	80003a6 <GET_CRLH_Position+0xbc>
		break;

	}
	return 0;
 80003a4:	2300      	movs	r3, #0

}
 80003a6:	4618      	mov	r0, r3
 80003a8:	370c      	adds	r7, #12
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bc80      	pop	{r7}
 80003ae:	4770      	bx	lr

080003b0 <MCAL_GPIO_Init>:
				But LQFP48 Package has only GPIO A, B, PART of C/D exported as external PINs from the Module
 */


void MCAL_GPIO_Init(GPIO_TypeDef *GPIOX ,GPIO_Pinconfig_t *pinconfig)
{
 80003b0:	b590      	push	{r4, r7, lr}
 80003b2:	b085      	sub	sp, #20
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	6039      	str	r1, [r7, #0]
	volatile uint32_t * Configregister =NULL;
 80003ba:	2300      	movs	r3, #0
 80003bc:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config=0;
 80003be:	2300      	movs	r3, #0
 80003c0:	73fb      	strb	r3, [r7, #15]
	Configregister =(pinconfig->GPIO_PinNumber <GPIO_PINS_8)? &GPIOX->CRL : &GPIOX->CRH;
 80003c2:	683b      	ldr	r3, [r7, #0]
 80003c4:	881b      	ldrh	r3, [r3, #0]
 80003c6:	2bff      	cmp	r3, #255	; 0xff
 80003c8:	d801      	bhi.n	80003ce <MCAL_GPIO_Init+0x1e>
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	e001      	b.n	80003d2 <MCAL_GPIO_Init+0x22>
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	3304      	adds	r3, #4
 80003d2:	60bb      	str	r3, [r7, #8]
	//Clear CNF[:]  MODE[:]
	*Configregister &=~(0xf<<GET_CRLH_Position(pinconfig->GPIO_PinNumber));
 80003d4:	683b      	ldr	r3, [r7, #0]
 80003d6:	881b      	ldrh	r3, [r3, #0]
 80003d8:	4618      	mov	r0, r3
 80003da:	f7ff ff86 	bl	80002ea <GET_CRLH_Position>
 80003de:	4603      	mov	r3, r0
 80003e0:	461a      	mov	r2, r3
 80003e2:	230f      	movs	r3, #15
 80003e4:	4093      	lsls	r3, r2
 80003e6:	43da      	mvns	r2, r3
 80003e8:	68bb      	ldr	r3, [r7, #8]
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	401a      	ands	r2, r3
 80003ee:	68bb      	ldr	r3, [r7, #8]
 80003f0:	601a      	str	r2, [r3, #0]

	//IF PIN IS OUTPUT
	if((pinconfig->GPIO_MODE ==GPIO_MODE_OUTPUT_PP)||(pinconfig->GPIO_MODE ==GPIO_MODE_OUTPUT_OD)||(pinconfig->GPIO_MODE ==GPIO_MODE_OUTPUT_AF_PP)||(pinconfig->GPIO_MODE ==GPIO_MODE_OUTPUT_AF_OD))
 80003f2:	683b      	ldr	r3, [r7, #0]
 80003f4:	789b      	ldrb	r3, [r3, #2]
 80003f6:	2b04      	cmp	r3, #4
 80003f8:	d00b      	beq.n	8000412 <MCAL_GPIO_Init+0x62>
 80003fa:	683b      	ldr	r3, [r7, #0]
 80003fc:	789b      	ldrb	r3, [r3, #2]
 80003fe:	2b05      	cmp	r3, #5
 8000400:	d007      	beq.n	8000412 <MCAL_GPIO_Init+0x62>
 8000402:	683b      	ldr	r3, [r7, #0]
 8000404:	789b      	ldrb	r3, [r3, #2]
 8000406:	2b06      	cmp	r3, #6
 8000408:	d003      	beq.n	8000412 <MCAL_GPIO_Init+0x62>
 800040a:	683b      	ldr	r3, [r7, #0]
 800040c:	789b      	ldrb	r3, [r3, #2]
 800040e:	2b07      	cmp	r3, #7
 8000410:	d10e      	bne.n	8000430 <MCAL_GPIO_Init+0x80>
	{
		PIN_Config =((((pinconfig->GPIO_MODE -4 ) <<2) | (pinconfig->GPIO_OUTPUT_SPEED)) &0x0f);
 8000412:	683b      	ldr	r3, [r7, #0]
 8000414:	789b      	ldrb	r3, [r3, #2]
 8000416:	3b04      	subs	r3, #4
 8000418:	009b      	lsls	r3, r3, #2
 800041a:	b25a      	sxtb	r2, r3
 800041c:	683b      	ldr	r3, [r7, #0]
 800041e:	78db      	ldrb	r3, [r3, #3]
 8000420:	b25b      	sxtb	r3, r3
 8000422:	4313      	orrs	r3, r2
 8000424:	b25b      	sxtb	r3, r3
 8000426:	b2db      	uxtb	r3, r3
 8000428:	f003 030f 	and.w	r3, r3, #15
 800042c:	73fb      	strb	r3, [r7, #15]
 800042e:	e02c      	b.n	800048a <MCAL_GPIO_Init+0xda>


	}
	else //if pin is input
	{
		if ((pinconfig->GPIO_MODE ==GPIO_MODE_Analog) ||(pinconfig->GPIO_MODE ==GPIO_MODE_INPUT_FLO))
 8000430:	683b      	ldr	r3, [r7, #0]
 8000432:	789b      	ldrb	r3, [r3, #2]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d003      	beq.n	8000440 <MCAL_GPIO_Init+0x90>
 8000438:	683b      	ldr	r3, [r7, #0]
 800043a:	789b      	ldrb	r3, [r3, #2]
 800043c:	2b01      	cmp	r3, #1
 800043e:	d107      	bne.n	8000450 <MCAL_GPIO_Init+0xa0>
		{
			//set CNF[:]  MODE[:]
			PIN_Config =((((pinconfig->GPIO_MODE  ) <<2) | 0X0) &0x0f);
 8000440:	683b      	ldr	r3, [r7, #0]
 8000442:	789b      	ldrb	r3, [r3, #2]
 8000444:	009b      	lsls	r3, r3, #2
 8000446:	b2db      	uxtb	r3, r3
 8000448:	f003 030f 	and.w	r3, r3, #15
 800044c:	73fb      	strb	r3, [r7, #15]
 800044e:	e01c      	b.n	800048a <MCAL_GPIO_Init+0xda>

		}
		else if((pinconfig->GPIO_MODE ==GPIO_MODE_AF_INPUT)) //consider it as input floating
 8000450:	683b      	ldr	r3, [r7, #0]
 8000452:	789b      	ldrb	r3, [r3, #2]
 8000454:	2b08      	cmp	r3, #8
 8000456:	d102      	bne.n	800045e <MCAL_GPIO_Init+0xae>
		{
			//set CNF[:]  MODE[:]
			PIN_Config =((((GPIO_MODE_INPUT_FLO ) <<2) | 0X0) &0x0f);
 8000458:	2304      	movs	r3, #4
 800045a:	73fb      	strb	r3, [r7, #15]
 800045c:	e015      	b.n	800048a <MCAL_GPIO_Init+0xda>

		}
		else //input PU or PD
		{
			PIN_Config =((((GPIO_MODE_INPUT_PU)>>2) |0x0)&0x0f);
 800045e:	2300      	movs	r3, #0
 8000460:	73fb      	strb	r3, [r7, #15]
			if(pinconfig->GPIO_MODE ==GPIO_MODE_INPUT_PU)
 8000462:	683b      	ldr	r3, [r7, #0]
 8000464:	789b      	ldrb	r3, [r3, #2]
 8000466:	2b02      	cmp	r3, #2
 8000468:	d107      	bne.n	800047a <MCAL_GPIO_Init+0xca>
			{
				//Table 20. Port bit configuration table PXODR=1
				GPIOX->ODR |=pinconfig->GPIO_PinNumber;
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	68db      	ldr	r3, [r3, #12]
 800046e:	683a      	ldr	r2, [r7, #0]
 8000470:	8812      	ldrh	r2, [r2, #0]
 8000472:	431a      	orrs	r2, r3
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	60da      	str	r2, [r3, #12]
 8000478:	e007      	b.n	800048a <MCAL_GPIO_Init+0xda>

			}
			else
			{
				//Table 20. Port bit configuration table PXODR=0
				GPIOX->ODR &=~pinconfig->GPIO_PinNumber;
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	68db      	ldr	r3, [r3, #12]
 800047e:	683a      	ldr	r2, [r7, #0]
 8000480:	8812      	ldrh	r2, [r2, #0]
 8000482:	43d2      	mvns	r2, r2
 8000484:	401a      	ands	r2, r3
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	60da      	str	r2, [r3, #12]
		}

	}

	//write on CRL or CRH
	(*Configregister) |= (PIN_Config <<GET_CRLH_Position(pinconfig->GPIO_PinNumber));
 800048a:	7bfc      	ldrb	r4, [r7, #15]
 800048c:	683b      	ldr	r3, [r7, #0]
 800048e:	881b      	ldrh	r3, [r3, #0]
 8000490:	4618      	mov	r0, r3
 8000492:	f7ff ff2a 	bl	80002ea <GET_CRLH_Position>
 8000496:	4603      	mov	r3, r0
 8000498:	fa04 f203 	lsl.w	r2, r4, r3
 800049c:	68bb      	ldr	r3, [r7, #8]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	431a      	orrs	r2, r3
 80004a2:	68bb      	ldr	r3, [r7, #8]
 80004a4:	601a      	str	r2, [r3, #0]




}
 80004a6:	bf00      	nop
 80004a8:	3714      	adds	r7, #20
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd90      	pop	{r4, r7, pc}

080004ae <MCAL_GPIO_ReadPin>:
 * @retval      -the input pin value (two values based in @ref GPIO_PIN_state)
 * Note         -none
 */

uint8_t MCAL_GPIO_ReadPin(GPIO_TypeDef *GPIOX ,uint16_t pinNumber)
{
 80004ae:	b480      	push	{r7}
 80004b0:	b085      	sub	sp, #20
 80004b2:	af00      	add	r7, sp, #0
 80004b4:	6078      	str	r0, [r7, #4]
 80004b6:	460b      	mov	r3, r1
 80004b8:	807b      	strh	r3, [r7, #2]
	uint8_t bit_status=0;
 80004ba:	2300      	movs	r3, #0
 80004bc:	73fb      	strb	r3, [r7, #15]
	if(((GPIOX->IDR) & pinNumber) !=(uint32_t)GPIO_PIN_reset)
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	689a      	ldr	r2, [r3, #8]
 80004c2:	887b      	ldrh	r3, [r7, #2]
 80004c4:	4013      	ands	r3, r2
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d002      	beq.n	80004d0 <MCAL_GPIO_ReadPin+0x22>
	{
		bit_status =GPIO_PIN_set;
 80004ca:	2301      	movs	r3, #1
 80004cc:	73fb      	strb	r3, [r7, #15]
 80004ce:	e001      	b.n	80004d4 <MCAL_GPIO_ReadPin+0x26>
	}
	else
	{
		bit_status =GPIO_PIN_reset;
 80004d0:	2300      	movs	r3, #0
 80004d2:	73fb      	strb	r3, [r7, #15]
	}
	return bit_status;
 80004d4:	7bfb      	ldrb	r3, [r7, #15]

}
 80004d6:	4618      	mov	r0, r3
 80004d8:	3714      	adds	r7, #20
 80004da:	46bd      	mov	sp, r7
 80004dc:	bc80      	pop	{r7}
 80004de:	4770      	bx	lr

080004e0 <MCAL_GPIO_togglePin>:
 * @retval      -none
 * Note         -none
 */

void MCAL_GPIO_togglePin(GPIO_TypeDef *GPIOX ,uint16_t pinNumber )
{
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
 80004e8:	460b      	mov	r3, r1
 80004ea:	807b      	strh	r3, [r7, #2]
	GPIOX->ODR ^=(uint32_t)pinNumber;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	68da      	ldr	r2, [r3, #12]
 80004f0:	887b      	ldrh	r3, [r7, #2]
 80004f2:	405a      	eors	r2, r3
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	60da      	str	r2, [r3, #12]

}
 80004f8:	bf00      	nop
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bc80      	pop	{r7}
 8000500:	4770      	bx	lr
	...

08000504 <__libc_init_array>:
 8000504:	b570      	push	{r4, r5, r6, lr}
 8000506:	2500      	movs	r5, #0
 8000508:	4e0c      	ldr	r6, [pc, #48]	; (800053c <__libc_init_array+0x38>)
 800050a:	4c0d      	ldr	r4, [pc, #52]	; (8000540 <__libc_init_array+0x3c>)
 800050c:	1ba4      	subs	r4, r4, r6
 800050e:	10a4      	asrs	r4, r4, #2
 8000510:	42a5      	cmp	r5, r4
 8000512:	d109      	bne.n	8000528 <__libc_init_array+0x24>
 8000514:	f000 f81a 	bl	800054c <_init>
 8000518:	2500      	movs	r5, #0
 800051a:	4e0a      	ldr	r6, [pc, #40]	; (8000544 <__libc_init_array+0x40>)
 800051c:	4c0a      	ldr	r4, [pc, #40]	; (8000548 <__libc_init_array+0x44>)
 800051e:	1ba4      	subs	r4, r4, r6
 8000520:	10a4      	asrs	r4, r4, #2
 8000522:	42a5      	cmp	r5, r4
 8000524:	d105      	bne.n	8000532 <__libc_init_array+0x2e>
 8000526:	bd70      	pop	{r4, r5, r6, pc}
 8000528:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800052c:	4798      	blx	r3
 800052e:	3501      	adds	r5, #1
 8000530:	e7ee      	b.n	8000510 <__libc_init_array+0xc>
 8000532:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000536:	4798      	blx	r3
 8000538:	3501      	adds	r5, #1
 800053a:	e7f2      	b.n	8000522 <__libc_init_array+0x1e>
 800053c:	08000564 	.word	0x08000564
 8000540:	08000564 	.word	0x08000564
 8000544:	08000564 	.word	0x08000564
 8000548:	08000568 	.word	0x08000568

0800054c <_init>:
 800054c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800054e:	bf00      	nop
 8000550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000552:	bc08      	pop	{r3}
 8000554:	469e      	mov	lr, r3
 8000556:	4770      	bx	lr

08000558 <_fini>:
 8000558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800055a:	bf00      	nop
 800055c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800055e:	bc08      	pop	{r3}
 8000560:	469e      	mov	lr, r3
 8000562:	4770      	bx	lr
